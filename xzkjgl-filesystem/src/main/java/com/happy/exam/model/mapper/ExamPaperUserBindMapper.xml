<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.happy.exam.model.ExamPaperUserBind">

	<resultMap id="RM_ExamPaperUserBind" type="com.happy.exam.model.ExamPaperUserBind">
        <result property="id" column="Id"/>
        <result property="templateId" column="TemplateId"/>
        <result property="userId" column="UserId"/>
        <result property="userName" column="UserName"/>
        <result property="beginTime" column="beginTime"/>
        <result property="endTime" column="endTime"/>
        <result property="examNumbers" column="ExamNumbers"/>
        <result property="status" column="Status"/>
        <result property="remark" column="Remark"/>
        <result property="createUser" column="CreateUser"/>
        <result property="createTime" column="CreateTime"/>
        <result property="updateTime" column="UpdateTime"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		Id,TemplateId,UserId,UserName,beginTime,endTime,ExamNumbers,Status,Remark,CreateUser,CreateTime,UpdateTime
	    ]]>
	</sql>

	<!--保存 -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
	    <![CDATA[
	        INSERT INTO exam_paper_user_bind ( 
	        	Id ,
	        	TemplateId ,
	        	UserId ,
	        	UserName ,
	        	beginTime ,
	        	endTime ,
	        	ExamNumbers ,
	        	Status ,
	        	Remark ,
	        	CreateUser ,
	        	CreateTime ,
	        	UpdateTime 
	        ) VALUES (
	        	#{id} ,
	        	#{templateId} ,
	        	#{userId} ,
	        	#{userName} ,
	        	#{beginTime} ,
	        	#{endTime} ,
	        	#{examNumbers} ,
	        	#{status} ,
	        	#{remark} ,
	        	#{createUser} ,
	        	#{createTime} ,
	        	#{updateTime} 
	        )
	    ]]>
	</insert>
	
	<!-- 批量保存 -->
	<insert id="insertBatch">
	    <![CDATA[
	        INSERT INTO exam_paper_user_bind (
	        		Id ,
	        		TemplateId ,
	        		UserId ,
	        		UserName ,
	        		beginTime ,
	        		endTime ,
	        		ExamNumbers ,
	        		Status ,
	        		Remark ,
	        		CreateUser ,
	        		CreateTime ,
	        		UpdateTime 
	        ) VALUES 
	         ]]>
	        <foreach item="item" collection="list"   separator=",">
	        	(
					#{item.id} ,
					#{item.templateId} ,
					#{item.userId} ,
					#{item.userName} ,
					#{item.beginTime} ,
					#{item.endTime} ,
					#{item.examNumbers} ,
					#{item.status} ,
					#{item.remark} ,
					#{item.createUser} ,
					#{item.createTime} ,
					#{item.updateTime} 
	        	)
			</foreach>
	   
	</insert>

	<!-- update 条件组合 -->
	<sql id="update_sql">
		<set>
			<if test="templateId != null">
				TemplateId = #{templateId} ,
			</if>
			<if test="userId != null">
				UserId = #{userId} ,
			</if>
			<if test="userName != null and userName != ''">
				UserName = #{userName} ,
			</if>
			<if test="beginTime != null">
				beginTime = #{beginTime} ,
			</if>
			<if test="endTime != null">
				endTime = #{endTime} ,
			</if>
			<if test="examNumbers != null">
				ExamNumbers = #{examNumbers} ,
			</if>
			<if test="status != null">
				Status = #{status} ,
			</if>
			<if test="remark != null and remark != ''">
				Remark = #{remark} ,
			</if>
			<if test="createUser != null">
				CreateUser = #{createUser} ,
			</if>
			<if test="createTime != null">
				CreateTime = #{createTime} ,
			</if>
			<if test="updateTime != null">
				UpdateTime = #{updateTime} 
			</if>
		</set>
	</sql>
	
	<!-- 修改 -->
	<update id="update">
		UPDATE exam_paper_user_bind
		<include refid="update_sql" />
		WHERE
			Id = #{id} 	</update>

	<!-- 根据ID删除 -->
	<delete id="delete">
    	<![CDATA[
        	DELETE FROM exam_paper_user_bind 
        	WHERE
        		Id = #{id} 
    	]]>
	</delete>
	
	<!-- 批量删除 -->
	<delete id="delete_batch">
        DELETE FROM exam_paper_user_bind 
        WHERE Id IN 
        <foreach item="ids" collection="list" open="(" separator="," close=")">
			#{ids}
		</foreach>
    </delete>

	<!-- selsect -->
	<select id="getById" resultMap="RM_ExamPaperUserBind">
		SELECT
		<include refid="columns" />
		FROM exam_paper_user_bind
		WHERE
		Id = #{id}
	</select>

	<!-- 模糊查询这样： 字段名 LIKE CONCAT('%',CONCAT(#{model.userName},'%')) -->
	<sql id="findPage_where">
		<where>
				<if test="model.id != null">
					AND Id = #{model.id}
				</if>
				<if test="model.templateId != null">
					AND TemplateId = #{model.templateId}
				</if>
				<if test="model.userId != null">
					AND UserId = #{model.userId}
				</if>
				<if test="model.userName != null and model.userName !=''">
					AND UserName = #{model.userName}
				</if>
				<if test="model.beginTimeBegin != null">
					AND beginTime &gt;= #{model.beginTimeBegin}
				</if>
				<if test="model.beginTimeEnd != null">
					AND beginTime &lt;= #{model.beginTimeEnd}
				</if>
				<if test="model.endTimeBegin != null">
					AND endTime &gt;= #{model.endTimeBegin}
				</if>
				<if test="model.endTimeEnd != null">
					AND endTime &lt;= #{model.endTimeEnd}
				</if>
				<if test="model.examNumbers != null">
					AND ExamNumbers = #{model.examNumbers}
				</if>
				<if test="model.status != null">
					AND Status = #{model.status}
				</if>
				<if test="model.remark != null and model.remark !=''">
					AND Remark = #{model.remark}
				</if>
				<if test="model.createUser != null">
					AND CreateUser = #{model.createUser}
				</if>
				<if test="model.createTimeBegin != null">
					AND CreateTime &gt;= #{model.createTimeBegin}
				</if>
				<if test="model.createTimeEnd != null">
					AND CreateTime &lt;= #{model.createTimeEnd}
				</if>
				<if test="model.updateTimeBegin != null">
					AND UpdateTime &gt;= #{model.updateTimeBegin}
				</if>
				<if test="model.updateTimeEnd != null">
					AND UpdateTime &lt;= #{model.updateTimeEnd}
				</if>
		</where>
	</sql>

	<!-- 获取总数 -->
	<select id="findPage_count" resultType="long">
		SELECT COUNT(1)
		FROM exam_paper_user_bind
		<include refid="findPage_where" />
	</select>  

	<select id="findPage" resultMap="RM_ExamPaperUserBind">
		 SELECT
		<include refid="columns" />
		FROM exam_paper_user_bind
		<include refid="findPage_where" />

		<if test="model.sortColumns != null and model.sortColumns !=''">
			ORDER BY ${model.sortColumns}
		</if>
		
		<if test="offset != null and pageSize != null">
			LIMIT  #{offset}, #{pageSize}
		</if>
	</select>

</mapper>
